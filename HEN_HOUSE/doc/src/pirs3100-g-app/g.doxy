/*
###############################################################################
#
#  EGSnrc g application documentation
#  Copyright (C) 2020 National Research Council Canada
#
#  This file is part of EGSnrc.
#
#  EGSnrc is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Affero General Public License as published by the
#  Free Software Foundation, either version 3 of the License, or (at your
#  option) any later version.
#
#  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
#  more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
#
#  Author:          Ernesto Mainegra-Hing, 2020
#
#  Contributors:    
#
###############################################################################
*/

/*! \file g.doxy
 *  \brief Documents the g application
 *
 *  Contains the main body of the user's manual for the g application.
 *
 *  \EM
 */

 /*! \mainpage notitle

\section g_intro Introduction

This `EGSnrc` application calculates \g, the average kinetic energy fraction lost 
to radiative events for photon beams (radiative loss fraction) or the radiative yield Y in the 
case of charged particle  beams. For photons, quantities such as kerma, \f$\textrm{K}\f$, collision kerma, \f$\textrm{K}_\mathrm{col}\f$, energy-fluence-averaged mass energy-transfer coefficient, \f$\overline{\mu}_\mathrm{tr}/\rho\f$, 
and mass energy-absorption coefficient, \f$\overline{\mu}_\mathrm{en}/\rho\f$, are also calculated.

The `g` application was written by Iwan Kawrakow in the late 90's using the Mortran 3 language, well before a C/C++ interface was available. Important contributions and refinements were made by Dave Rogers in the early 2000's. Version 1.0 was released in January 2000 for the calculation of the average radiative fraction \f$\overline{g}\f$ or the raditaive yield Y. Later on, in March 2002, the code was extended to compute total and collision kerma (version 1.1). In the summer of 2002 the calculation of average mass-energy transfer and absorption coefficients was added (version 1.2) and a bug corrected to properly account for fluorescent photons(version 1.3).
The \f$\overline{g}\f$ value used during the 2003 update of the Canadian Co-60 
air kerma primary standard was calculated with this code. It was first released as part of EGSnrc in 2004 and has since been maintained by the EGSnrc Monte Carlo group at the NRC and the Carleton Laboratory for Radiotherapy Physics (CLRP).

Motivated by the need to generate databases of mass-energy aborption coefficients for `EGSnrc` applications that allow calculating collision kerma, a photon-beam-only calculation (calculation type = 1) was implemented in April 2006. With this calculation type the efficiency of \muen 
calculations is increased significantly. For instance, an efficiency increase of about a factor 
of 70 is obtained for a 600 keV calculation in air. At around the same time, the ability to run the calculation for more than one energy on a linear or a logarithmic energy grid was added.
Since the code calculates \muen_rho and \mutr_rho values, databases for calculating collision and total kerma can be generated.

In January 2017, version 1.4 introduced refinements to the `AUSGAB` routine which combined
with several changes in `EGSnrc` allow proper classification of sub-threshold events as either \a radiative 
or \a non-radiative during atomic relaxations following photoeffect, Compton scattering, and electron impact 
ionization (EII). According to this scheme, 
sub-threshold relaxation Auger electrons following photoeffect or Compton scattering are added to 
the kerma calculation (non-radiative) and sub-threshold relaxation fluorescent photons after EII are 
included as part of the energy lost to radiative events. 

Current version (1.5) fixes a bug in the calculation of \g for both calculation types when the photon 
energy is sampled from an energy spectrum. An exhaustive discussion of these issues can be found in a
detailed paper by Rogers and Townson ([Med. Phys. 46 2019](https://doi.org/10.1002/mp.13744)).
It also provides a cleaner output and an option for more verbose output.

\section g_method Calculation method

A description of the physical quantities and the equations used for their calculation is presented in this section. Most of these definitions can be found in basic radiation physics textbooks, hence users more interested with practical aspects of using the code can skip to the next section \ref g_calc_types.

\subsection g_charged Radiation yield

Radiation yield Y(\T0) of a charged particle is defined as the fraction of its initial kinetic energy \T0 emitted 
as electromagnetic radiation through the slowing down process of that particle in a medium. For light charged 
particles, bremsstrahlung, fluorescence after impact ionization and in-flight annihilation (in the case of positrons) 
are the interactions responsible for the emission of electromagnetic radiation. 

For the calculation of Y, the \c g application follows a number of charged particles with energy \T0 starting from the origin (0,0,0) 
with initial direction along the positive z-axis (0,0,1) as they travel across an infinite geometry filled with a user-defined medium. 
\Erad, the average energy radiated by these particles as they slow down in the medium is scored to compute Y using the expression

\f{equation}{
     Y = \frac{\overline{E}_\mathrm{rad}}{T_0}.
\f}

In adition to Y, the application also outputs \f$Y_\mathrm{brems}\f$, the radiative yield due to bremsstrahlung events to assess 
the approximation incurred when ignoring all other interactions as has been customarily done in the past.

\subsubsection g_e_scoring Scoring algorithm for charged particle sources

- Charged particle transport starts at the origin of an infinite geometry filled with a user-defined medium and the charged particles are followed as they slow down in the medium until their energy falls below the transport cut-off energy ECUT. 

- The average total energy of charged particles is scored in \Etot. In the case of a 
  monoenergetic source of energy \T0, \Etot = \T0, while for a spectrum \f$T(E)\f$, \Etot = \Tave, the average spectrum energy.
- Radiative photons (bremsstrahlung, annihilation photons, fluorescent photons after EII) are immediately discarded after their energy is scored as part of \Erad.
- Energy of sub-threshold fluorescent photons after EII are scored as part of \Erad.

\subsection g_photons Radiative fraction, mass energy transfer and absorption coefficients

A derivation of the equations used in the `g` application for the calculation of several physical quantities for photon beams is presented here. Expressions for monoenergetic beams are first derived, followed by a generalization to polyenergetic sources. A summary at the end of the section details the general scoring algorithm for photon sources.

\subsubsection mono Monoenergetic beams

The mass energy transfer coefficient, \mutr_rho for a monoenegetic photon beam of energy E can be calculated using 

\f{equation}{\label{def_mutr}
     \left(\frac{\mu_\mathrm{tr}}{\rho}\right) = \frac{\overline{E}_\mathrm{tr}}{E} \cdot \left(\frac{\mu}{\rho}\right),
\f}

which follows from the [definition](https://physics.nist.gov/PhysRefData/XrayMassCoef/chap3.html) of \mutr_rho, 
and where \Etr is the average photon energy transferred to charged particles after photon interactions (photoelectric, 
Compton, and pair production), and \murho is the mass attenuation coefficient for a photon of energy E. 

The mass energy absorption coefficient for photons of energy E, \muen_rho, is defined as the non-radiative part of \mutr_rho and can be calculated using the expression

\f{equation}{\label{def_muen}
     \left(\frac{\mu_\mathrm{en}}{\rho}\right) = 
     \left(1-\overline{g}\right) \cdot \left(\frac{\mu_\mathrm{tr}}{\rho}\right) =
	 \frac{\overline{E}_\mathrm{ab}}{E} \cdot \left(\frac{\mu}{\rho}\right),
\f}

where \Eab is the average fraction of \Etr absorbed in the medium and \g the average fraction of energy lost to
radiative events. 

\g is obtained as the ratio of the average energy lost to radiative events as the electrons slow down in a medium, \EradP, to \Etr: 

\f{equation}{
     \overline{g} = \frac{\overline{\overline{E}}_\mathrm{rad}}{\overline{E}_\mathrm{tr}},
\f}

where

\f{equation}{\label{EradP}
     \overline{\overline{E}}_\mathrm{rad} = \overline{E}_\mathrm{tr} - \overline{E}_\mathrm{ab}.
\f}

The estimation of \EradP follows the approach used above for\Erad to obtain radiation yield Y, however averaging is over all secondary charged particles.

Once the coefficients are known, kerma per unit fluence is obtained as

\f{equation}{\label{eq:K}
     \frac{K}{\phi} = E \cdot \left(\mu_\mathrm{tr}/\rho\right), 
\f}

and similarly, collision kerma per unit fluence is given by

\f{equation}{\label{eq:Kcol}
     \frac{K_\mathrm{col}}{\phi} = E \cdot \left(\mu_\mathrm{en}/\rho\right). 
\f}

\subsubsection poly Polyenergetic beams

In the case of a polyenergetic source of photons, the definition of \g follows from the defintion of kerma and collision kerma. Kerma per unit fluence is defined by

\f{equation}{\label{eq:def}
     \frac{K}{\phi} = \int \phi(E) \cdot E \cdot \left[\frac{\mu_\mathrm{tr}(E)}{\rho}\right] \cdot dE/\int \phi(E) \cdot dE.
\f}

The right-hand side of Eq.(\reflh{eq:def,8}) can be interpreted as the energy fluence weighted average of \mutr_rho times 
the fluence averaged spectrum energy or equivalently, as the fluence weighted average of the product of photon energy E and \mutr_rho:

\f{equation}{\label{eq:Kpoly}
     \frac{K}{\phi} = \left<\mu_\mathrm{tr}/\rho\right>_{\psi} \cdot \left<E\right>_{\phi}
	                = \left<E\cdot\mu_\mathrm{tr}/\rho\right>_{\phi}.
\f}

Similarly, substituting \mutr with \muen, collision kerma per unit fluence is given by

\f{equation}{\label{eq:Kpolycol}\label{eq_kerma_0}
     \frac{K_\mathrm{col}}{\phi} = \left<\mu_\mathrm{en}/\rho\right>_{\psi} \cdot \left<E\right>_{\phi}
	                             = \left<E\cdot\mu_\mathrm{en}/\rho\right>_{\phi}.
\f}

Eqs. (\reflh{eq:Kpoly,9}) and (\reflh{eq:Kpolycol,10}) are generalizations of Eqs. (\reflh{eq:K,6}) and (\reflh{eq:Kcol,7}) for polyenergetic sources. As in the case of monoenergetic beams, collision kerma and kerma are linked via the relationship

\f{equation}{\label{eq_kerma_1}
     \frac{K_\mathrm{col}}{\phi} = \left(1-\overline{g}\right) \frac{K}{\phi} 
	  = \left(1-\overline{g}\right) \left<E\cdot\mu_\mathrm{tr}/\rho\right>_{\phi},
\f}

thus defining \g as the fraction of energy transferred by all photons to electrons, lost to radiative events. With this definition the expression for \g becomes

\f{equation}{
     \overline{g} = 1 - \frac{\left<E\cdot\mu_\mathrm{en}\right>_{\phi}}{\left<E\cdot\mu_\mathrm{tr}\right>_{\phi}},
\f}

which from Eqs. (\reflh{def_mutr,2}), (\reflh{def_muen,3}) and (\reflh{EradP,5}) is equivalent to

\f{equation}{\label{eq:g}
  \overline{g} = 1 - \frac{\left<\overline{E}_\mathrm{en}\cdot\mu\right>_{\phi}}{\left<\overline{E}_\mathrm{tr}\cdot\mu\right>_{\phi}} = \frac{\left<\overline{\overline{E}}_\mathrm{rad}\cdot\mu\right>_{\phi}}{\left<\overline{E}_\mathrm{tr}\cdot\mu\right>_{\phi}}
\f}

Eq. (\reflh{eq:g,13}) generalizes the expression for \g obtained in the monoenergetic case (Eq. 6) and is the expression used to compute \g in the `g` application.

The energy fluence weighted average \f$\left<\mu_\mathrm{tr}/\rho\right>_{\psi}\f$ is computed using the expression

\f{equation}{
     \left<\mu_\mathrm{tr}/\rho\right>_{\psi} = 
	 \frac{\left<E\cdot\mu_\mathrm{tr}/\rho\right>_{\phi}}{\left<E\right>_{\phi}} =
	 \frac{\left<\overline{E}_\mathrm{tr}\cdot\mu\right>_{\phi}}{\left<E\right>_{\phi}},
\f}

and the energy fluence weighted average \f$\left<\mu_\mathrm{en}/\rho\right>_{\psi}\f$ with

\f{equation}{\label{eq_muen_0}
     \left<\mu_\mathrm{en}/\rho\right>_{\psi} = 
	 \frac{\left<E\cdot\mu_\mathrm{en}/\rho\right>_{\phi}}{\left<E\right>_{\phi}} =
	 \frac{\left<\overline{E}_\mathrm{en}\cdot\mu\right>_{\phi}}{\left<E\right>_{\phi}},
\f}

or alternatively using

\f{equation}{\label{eq_muen_1}
     \left<\mu_\mathrm{en}/\rho\right>_{\psi} = \left(1-\overline{g}\right)
	 \left<\mu_\mathrm{tr}/\rho\right>_{\psi},
\f}

from which kerma and collision kerma per unit fluence are calculated using Eqs. (\reflh{eq:Kpoly,9}) and (\reflh{eq_kerma_1,11})
respectively. 

\subsubsection g_scoring Scoring algorithm for photon sources

- Initial photons are placed at the origin of an infinite geometry filled with a user-defined medium.
- Primary photons are killed after interacting in the medium 
- After a photon interaction, resulting photons are discarded.
- The photon energy transferred to charged particles after these interactions is scored to estimate \Etr. 
- After atomic relaxations only energy transferred to charged particles (Auger or Coster-Kronig) 
is scored as part of \Etr.
- Atomic relaxation events after electron impact ionization (EII), leading to fluoresence are classified as part of the radiative loss.
- Radiative photons (bremsstrahlung, annihilation photons, fluorescent photons after EII) are immediately discarded after their energy is scored as part of \Erad. 
- Electrons are followed as they slow down in the medium until their energy falls below the transport cut-off energy ECUT. 
- Especial attention is paid to sub-threshold relaxation particles: 
   - Energy of sub-threshold Auger electrons after Compton or photoeffect is scored as part of \Etr. 
   - Energy of sub-threshold fluorescent photons after EII are scored as part of \Erad.

\note Although this app uses the variable g to refer indistinctively to both the radiative yield for charged particles, Y, 
and the radiative fraction for photons, g, these quantities are conceptually different. Radiative yield is defined as the 
fraction of a charged particle's kinetic energy lost to radiation as it slows down in a medium, while radiative fraction is defined 
as the average fraction of a photon's kinetic energy transferred to charged particles and subsequently lost to radiation as these charged 
particles slow down in the medium. The radiative fraction \g can be obtained from the integration of Y(E) over the secondary electron spectrum.

\section g_calc_types Calculation types

In its default implementation, the \c g code loops over a fixed number of histories
for a source of \a photons or <em>charged particles</em> sampling the initial particle parameters
and invoking the electromagnetic shower routine. This calculation can be explicitely requested by setting the `calculation type` input to 0. Collision kerma is calculated using Eq.(\reflh{eq_kerma_0,10}) 
and the mass energy absorption coefficient \muen is calculated using Eq.(\reflh{eq_muen_0,15})

A `calculation type` 1, for use with photon sources only, is taylored to the efficient calculation of the mass energy absorption coefficient \muen. In this mode the `g` application takes advantage of the faster convergence of \mutr and 1-\g  (when \g is small) to a desired accuracy and collision kerma is calculated with Eq.(\reflh{eq_kerma_1,11}) 
and the mass energy absorption coefficient \muen is calculated using Eq.(\reflh{eq_muen_1,16}).
The calculation finishes as soon as a prescribed relative uncertainty \c accu is reached if provided by the user (\c accu > 0), else the calculation runs until all histories completed.

The inputs for a `calculation type` can be anywhere in the input file and do not require to 
be placed between delimiters as is customary in most EGSnrc applications. An example of a calculation type 1 input block that should run until a 0.01% accuracy is reached, or
all histories are completed, is shown in the following code snippet:   

\code

  ####################################################################
  # calculation types
  #
  # 0 (default)            : Executes fixed number of histories
  #
  # 1 (photon source only) : Runs to desired accuracy or total number 
  #                          of histories if no accuracy specified or
  #                          number of histories not large enough. 
  #####################################################################
  #
  calculation type = 1

  ##################################
  # Desired accuracy for mutr, muen, and 1-g
  # (relevant only for calculation type 1)
  ##################################
  accuracy = 0.0001

  #####################################################################
  # Option to provide extra information such as a efficiency gain
  # of calculation type 1 over 0, correlation between total and radiative
  # energy losses. Only relevant for type 1 calculations.
  # Defaults to 'no'.
  ####################################################################
  verbose = yes
  #############
\endcode

\note If the number of histories in a calculation type 1 is not large enough, the calculation will finish without reaching a desired accuracy.

\section g_spec Source definition

The input block for definiting source parameters must be placed between `start` and `stop`
delimiters. For instance, to define a monoenergetic source emitting particles of energy \f$E\f$, 
and charge \f$q\f$, the input keys required are:

\verbatim
 :Start Source Input:
  Incident Charge         = q # 0 for photons -1 or 1 for e- or e+
  INCIDENT SPECTRUM       = mono-energy
  INCIDENT KINETIC ENERGY = E
:Stop Source Input:
\endverbatim

Several individual energies can be requested by adding comma separated
energy values:

\verbatim
 :Start Source Input:
  Incident Charge         = q # 0 for photons -1 or 1 for e- or e+
  INCIDENT SPECTRUM       = mono-energy
  INCIDENT KINETIC ENERGY = E1,...,EN
:Stop Source Input:
\endverbatim

In this case the code will loop over individual calculations for each energy.

To generate a database of \mutr or \muen values as function of energy, one can define a linear or 
a logarithmic energy grid. A linear (equidistant) energy grid is defined using the input keys

\verbatim
 :Start Source Input:
  Incident Charge         = q # 0 for photons -1 or 1 for e- or e+
  INCIDENT SPECTRUM       = mono-energy-lin-range
  INCIDENT KINETIC ENERGY = Emin, Emax, DE
:Stop Source Input:
\endverbatim

where the input key `DE` defines the bin width \f$\Delta\mathrm{E}\f$ defining a grid of energies: 
\f$E_\mathrm{min}, ..., E_\mathrm{min} + i \cdot \Delta\mathrm{E}, ..., E_\mathrm{max}\f$

Similarly, a logarithmic energy grid is defined using the input keys

\verbatim
 :Start Source Input:

 INCIDENT SPECTRUM=       mono-energy-log-range
 INCIDENT KINETIC ENERGY= Emin, Emax, N

:Stop Source Input:
\endverbatim

the logarithmic bin width \f$\Delta_\mathrm{log}\f$ is obtained using

\f{equation}{
  \Delta_\mathrm{log} = log\left(\frac{E_\mathrm{max}}{E_\mathrm{min}}\right)/\left(N-1\right)
\f}

defining a logarithmic grid of N energy values 

\f{equation}{
  E_i = e^{log(E_\mathrm{min})+i \cdot \Delta_\mathrm{log}}
\f}


\note These calculations will be limited to one CPU thread since there is no parallel execution capability in `g`. As the energy increases, CPU time will also increase. If a computer cluster or multiprocessor PC is available, it is more efficient to perform these calculations individually
by submitting them to the available CPU threads. 
A strategy for creating large \muen databases is discussed below in section \ref g_databases.

Source of particles with a tabulated energy distribution (spectrum) can also be defined. A polyenergetic Co-60 beam is defined using the keys:   

\code
#########################################################################
### SOURCE DEFINITION
#########################################################################
 :Start Source Input:
#####################

 Incident Charge=   0 # -1 or 1 for e- or e+
 ##############################
 # Co-60 polyenergetic source
 ##############################
 INCIDENT SPECTRUM = SPECTRUM
 SPECTRUM FILE     = $HEN_HOUSE/spectra/egsnrc/co60.spectrum

 :Stop Source Input:
####################
\endcode

\section g_example Input examples

\subsection g_mono Monoenergetic 30 keV photon beam example
\code

############################################
#
# Example input file for the g application:
#
#  - Monoenergetic 30 keV photon beam
#  - Calculation type 1 (photon beam only)
#  - Verbose output
#  - Desired accuracy 0.1%
#
###########################################

##############################
# Application specific inputs
##############################
 media=  air0o
 INITIAL RANDOM NO. SEEDS= 97, 33
 Number of HISTORIES= 2000000000000
 accuracy= 0.001
 calculation type= 1
 verbose = yes

##################### 
 :Start Source Input:
##################### 

 INCIDENT SPECTRUM=       mono-energy
 INCIDENT KINETIC ENERGY= 0.030
 Incident Charge=         0

##################### 
 :Stop Source Input:
##################### 

################################ 
 :Start MC Transport Parameter:
################################ 

 Global ECUT=                    0.512
 Global PCUT=                    0.001
 Global SMAX=                    1e10
 Spin effects=                   On

 Rayleigh scattering   = On
 Photon cross sections  = mcdf-xcom
 Pair cross sections = nrc
 Triplet production = On
 Bound Compton Scattering = norej
 Radiative Compton corrections = ON
 Atomic relaxations=             On
 Photoelectron angular sampling= On

 Brems angular sampling=         KM
 Brems cross sections= nrc
 Pair angular sampling=          KM
 ESTEPE=                         0.25
 XIMAX=                          0.5
 Electron Impact Ionization=     ik
 Skin depth for BCA=             3
 Boundary crossing algorithm=    exact
 Electron-step algorithm=        default

###############################
 :Stop MC Transport Parameter:
###############################

###########################
:start media definition:
###########################

    ### energy transport cutoffs
    ae = 0.512
    ue = 2.511
    ap = 0.001
    up = 2.00

    :start air0o:
      density correction file     = air_dry_nearsealevel
      bremsstrahlung correction= NRC
    :stop air0o:

###########################
:stop media definition:
###########################
\endcode

\subsection g_databases Building large databases

A consequence of not having an option for parallel execution is that
lengthy calculations cannot be run on multiple cores, for instance on a computer cluster
or a multicore processor PC.
This limitation makes the creation of large databases spaning an energy range from threshold
up to several MeV very time consuming. As the energy of the initial particle increases, more energetic electrons are created which have to be followed in an infinite geometry until they have lost all their kinetic energy. It is hence more practical to create individual input files for  each energy, and submit individual calculations. Furhtermore, one can take advantage of the energy dependence of the mass energy transfer and absorption coefficients and use a logarithmic energy grid to reduce the number of high energy data points.

A simple Bash script is provided here as an example of what one could do to submit multiple calculations on a logarithmic energy grid. By default it runs type 1 calculations 
in air for 10 energies between 1 keV and 1 MeV on a logarithmic energy grid in the available
cores of a PC. Accuracy is set to 0.1\%. Water is also available and further media can be added to the media definition block of the input file template. By passing different arguments a user can change certain parameters of the simulations. It would be simple to allow changing other parameters:
\latexonly
\newpage
\endlatexonly
\code
#!/bin/bash
###############################################################################
#
#  Linux script to create input files on-the-fly for the g-app 
#  to generate databases of muen or mutr values on a logarithmic grid.
#
#  Copyright (C) 2020 National Research Council Canada
#
###############################################################################
#
#  Author:          Ernesto Mainegra-Hing
#
#  Contributors:    
#
###############################################################################
#
#
# Defaults
#
n=10
Emin=0.001
Emax=1.0
accu=0.001 # 0.1% stat. accuracy
prefix=muen_rho
pe_xsections=xcom
medium=air
E=0.01
#---------------------------------
# Parse command line for arguments
#---------------------------------
while test $# -gt 0; do
    case "$1" in
      min=*)  Emin=`echo $1  | sed 's/min=//'` ;;
      max=*)  Emax=`echo $1  | sed 's/max=//'` ;;
        n=*)     n=`echo $1  | sed 's/n=//'` ;;
     accu=*)  accu=`echo $1  | sed 's/accu=//'` ;;
   medium=*) medium=`echo $1 | sed 's/medium=//'` ;;
   prefix=*) prefix=`echo $1 | sed 's/prefix=//'` ;;
       pe=*) pe_xsections=`echo $1 | sed 's/pe=//'` ;;
    esac
    shift
done

#---------------------
# get energy limits
#---------------------
AP=$(echo "scale=3; $Emin" | bc)
UP=$(echo "scale=3; $Emax" | bc)
AE=$(echo "scale=3; $AP+0.511" | bc)
UE=$(echo "scale=3; $UP+0.511" | bc)
#---------------------
# prepend leading zero
#---------------------
printf -v AP "%0.3f" ${AP}
printf -v UP "%0.3f" ${UP}
printf -v AE "%0.3f" ${AE}
printf -v UE "%0.3f" ${UE}

echo 'lower photon energy cut-off:' $AP
echo 'upper photon energy cut-off:' $UP
echo 'lower electron energy cut-off:' $AE
echo 'upper electron energy cut-off:' $UE

# Let's be explicit
typeset -i i 
let "n -= 1"
Dlog1=$(echo "l(${Emax}) - l(${Emin})" | bc -l)
Dlog=$(echo "${Dlog1} / $n" | bc -l)
printf 'Dlog = %.5f\n' "$Dlog"

for ((i=0;i<=n;i++)) 
do
  E=$(echo "e(l(${Emin})+$i*${Dlog})" | bc -l)
  # Protect against round-off at 1 keV
  if (( $(echo "$E == 0.001" | bc -l) )); then
     E=$(echo "e(l(${Emin})+0.0000000001+$i*${Dlog})" | bc -l)
  fi
  printf -v Ename "%0.8f" ${E}
  echo E = ${E}
  name=${prefix}_${medium}_${pe_xsections}_${Ename}_MeV
    cat >${name}.egsinp <<EOF

##############################
 :Start MC Transport Parameter:

 Global ECUT=                    $AE
 Global PCUT=                    $AP
 Global SMAX=                    1e10
 Spin effects=                   On

 Rayleigh scattering   = On
 Photon cross sections  = $pe_xsections
 Pair cross sections = nrc
 Triplet production = On
 Bound Compton Scattering = norej
 Radiative Compton corrections = ON
 Atomic relaxations=             On
 Photoelectron angular sampling= On

 Brems angular sampling=         KM
 Brems cross sections= nrc
 Pair angular sampling=          KM
 ESTEPE=                         0.25
 XIMAX=                          0.5
 Electron Impact Ionization=     On
 Skin depth for BCA=             3
 Boundary crossing algorithm=    exact
 Electron-step algorithm=        default

 :Stop MC Transport Parameter:
 #############################

 media=  $medium
 INITIAL RANDOM NO. SEEDS= 97, 33
 Number of HISTORIES= 2000000000000
 accuracy= $accu # relative accuracy
 calculation type= 1
 verbose = yes

 :Start Source Input:
 --------------------

 INCIDENT SPECTRUM=       mono-energy
 INCIDENT KINETIC ENERGY= ${E}
 Incident Charge=         0
 
 :Stop Source Input:
 -------------------
################################################################################
### PEGS PARAMETERS
################################################################################

:start media definition:

    ### energy transport cutoffs
    ae = $AE 
    ue = $UE 
    ap = $AP 
    up = $UP 


    :start air:
      density correction file     = air_dry_nearsealevel
      bremsstrahlung correction= NRC
    :stop air:

    :start water:
      density correction file     = water_icru90
      bremsstrahlung correction= NRC
    :stop water:

:stop media definition:

EOF
########################################################################
#
# Command to submit the calculations to the cores of a Unix/Linux 
# computer cluster running a PBS job scheduler. 
#
# Uncomment the two lines below and comment out the subsequent lines to 
# submit to a cluster:
#
#echo Submitting $name to the queue user1...
#${HEN_HOUSE}scripts/run_user_code_batch g ${name} pegsless batch=pbs user1
##########################################################################

########################################################################
#
# Submission to the available logical threads of a multicore PC:
#
# Comment out the 4 lines below if using the command above for submission
# to a cluster!
#
########################################################################
command="g -i $name"
$command -b -P 1 -j 1 >/dev/null 2>&1 &
processid=`printf %5d $!`
echo "LAUNCHED $processid: $command -b -P 1 -j 1 &"
########################################################################
done
# wait for completion and report
# Comment out the 4 lines below if using the command for submission
# to a cluster!
wait
echo --------------------------------------------------------------------------------
echo "SIMULATION COMPLETED"
echo
########################################################################
exit 0
\endcode

\section g_usage Usage
The `EGSnrc` application \c g can be started from the command line
using

\verbatim
g -i input_file [-p pegs_file] [-o output_file] [-b]
\endverbatim

where the arguments in square brackets are optional. When the \c g application 
is run interactively, results of a calculation are written to standard output.
If one wants to print the results of an interactive calculation to an output file, 
one can redirect the ouptut to a file using

\verbatim
g -i input_file [-p pegs_file] > output_file
\endverbatim

On Linux, one can make use of the \b tee command to route the results to multiple
outputs (standard and a file) :

\verbatim
g -i input_file [-p pegs_file] | tee output_file
\endverbatim

\note <b>Beware of overwritting an existing file!</b>

\subsection usage_options Optional options:
<ul>
<li>
With the <b>\c -b</b> option one specifies a `batch` run, \em i.e. the
output is redirected to <b>\c output_file.egslog</b>. 
</li>
<li>
If material information is obtained via a PEGS4 data file, 
the option <b>\c -p</b> tells the application
which file to use. Alternatively, materials can be defined in the input file via 
a media definition input block, in which case this option must be ommited.
</li>
<li>
With the <b>\c -o</b> option one can change the name of the output files 
(by default <b>\c input_file.xxx</b>
is used, where <b>\c xxx</b> is <b>\c .egslog</b> for the log file, <b>\c .egsdat</b> for the
data file, etc.). 
</li>
</ul>
<b>Remember that any application can be executed from the `EGSnrc` GUI \c egs_gui!!!</b>

*/
